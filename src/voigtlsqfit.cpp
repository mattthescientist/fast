// The FTS Atomic Spectrum Tool (FAST)
// Copyright (C) 2011-2012 M. P. Ruffoni
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//==============================================================================
// VoigtLsqfit Class (voigtlsqfit.cpp)
//==============================================================================
// This file contains a translation of XGremlin's voigt and vstart functions,
// which generate Voigt profiles for the "lsqfit" and "plot" commands. 
//
// The original XGremlin Fortran functions were found in voigt.f. The p and
// bgg arrays were copied from init.f, and vf from the block data at the bottom
// of voigt.f.
//
// Since both voigt and vstart use many global and common variables in their
// implementation, these C++ versions have been wrapped in a class of their own
// to mimic this behaviour without exposing such unconstrained data to the rest
// of the program.
//
// Remember that C/C++ uses base zero arrays compared to Fortran's base 1. Array
// indicies are therefore different here compared to the original code.
//
#include "voigtlsqfit.h"
#include <cmath>
#include <iostream>

using namespace::std;

const float p[26] = { 1.064467, 1.081922, 1.099638, 1.117619,
    1.135864, 1.154377, 1.173157, 1.192206, 1.211524, 1.231108,
    1.250959, 1.271072, 1.291443, 1.312067, 1.332934, 1.354034,
    1.375351, 1.396866, 1.418555, 1.440383, 1.462309, 1.484277,
    1.506214, 1.528029, 1.549605, 1.570797 };

const float bgg[51]	= { .360674, .352999, .345341, .337700,
    .330075, .322468, .314878, .307305, .299750, .292213, .284693,
    .277192, .269708, .262243, .254797, .247369, .239960, .232570,
    .225199, .217847, .210515, .203202, .195909, .188636, .181382,
    .174148, .166935, .159742, .152569, .145416, .138284, .131172,
    .124080, .117009, .109959, .102929, .095919, .088930, .081961,
    .075013, .068084, .061176, .054288, .047420, .040573, .033747,
    .026944, .020164, .013411, .006687, 0.000000 };
    
const float vf[1300] = { 1.f, .993092f, .972655f, .939523f, .895025f, .840896f, 
	  .779165f, .712025f, .641713f, .570382f, .5f, .432269f, .368567f, 
	  .309927f, .257028f, .210224f, .169576f, .134904f, .105843f, 
	  .0819f, .0625f, .047039f, .034915f, .025559f, .018453f, .013139f, 
	  .009227f, .00639f, .004364f, .00294f, .001953f, .00128f, 8.27e-4f,
	   5.27e-4f, 3.31e-4f, 2.05e-4f, 1.26e-4f, 7.6e-5f, 4.5e-5f, 
	  2.6e-5f, 1.5e-5f, 9e-6f, 5e-6f, 3e-6f, 1e-6f, 1e-6f, 0.f, 0.f, 
	  0.f, 0.f, 1.f, .993057f, .972521f, .939244f, .894586f, .840314f, 
	  .778491f, .711346f, .641137f, .570032f, .5f, .432733f, .36959f, 
	  .311573f, .25933f, .213177f, .173144f, .139023f, .110429f, 
	  .086852f, .067714f, .052408f, .040342f, .030955f, .023744f, 
	  .018267f, .014146f, .011072f, .008791f, .007104f, .005855f, 
	  .004928f, .004232f, .003705f, .003297f, .002975f, .002715f, 
	  .002501f, .002321f, .002165f, .002029f, .001909f, .001801f, 
	  .001703f, .001614f, .001533f, .001458f, .001388f, .001324f, 
	  .001265f, 1.f, .99302f, .972379f, .938951f, .894124f, .839702f, 
	  .777785f, .710635f, .640535f, .569666f, .5f, .433215f, .370649f, 
	  .313271f, .261696f, .216204f, .17679f, .143221f, .115087f, 
	  .091868f, .072979f, .057817f, .045796f, .036368f, .029043f, 
	  .023395f, .019062f, .015748f, .013211f, .011263f, .009756f, 
	  .008578f, .007645f, .006893f, .006276f, .005762f, .005326f, 
	  .00495f, .004622f, .004331f, .004072f, .003838f, .003626f, 
	  .003433f, .003257f, .003094f, .002944f, .002806f, .002677f, 
	  .002558f, 1.f, .992981f, .97223f, .938642f, .893637f, .839058f, 
	  .777044f, .70989f, .639905f, .569285f, .5f, .433716f, .371744f, 
	  .315023f, .264129f, .219307f, .180516f, .147496f, .119816f, 
	  .096945f, .078294f, .063263f, .051274f, .041794f, .034347f, 
	  .028522f, .023973f, .020417f, .017626f, .015419f, .013657f, 
	  .012232f, .011064f, .010092f, .009272f, .008569f, .007959f, 
	  .007424f, .006949f, .006525f, .006143f, .005797f, .005482f, 
	  .005194f, .00493f, .004686f, .004461f, .004252f, .004059f, 
	  .003879f, 1.f, .99294f, .972072f, .938316f, .893124f, .83838f, 
	  .776264f, .709107f, .639246f, .568887f, .5f, .434236f, .372878f, 
	  .316832f, .266633f, .222488f, .184324f, .151849f, .124617f, 
	  .102084f, .083658f, .068744f, .056776f, .047233f, .039654f, 
	  .033646f, .028878f, .02508f, .022035f, .019571f, .017557f, 
	  .01589f, .014491f, .013304f, .012283f, .011395f, .010614f, 
	  .009922f, .009304f, .008747f, .008244f, .007786f, .007368f, 
	  .006985f, .006633f, .006308f, .006007f, .005728f, .00547f, 
	  .005228f, 1.f, .992896f, .971905f, .93797f, .892581f, .837664f, 
	  .775442f, .708285f, .638554f, .56847f, .5f, .434776f, .374053f, 
	  .318699f, .269209f, .22575f, .188214f, .156282f, .129489f, 
	  .107281f, .089067f, .074258f, .062298f, .05268f, .044963f, 
	  .038767f, .033777f, .029736f, .026438f, .023721f, .021458f, 
	  .019552f, .017928f, .016529f, .015311f, .014241f, .013292f, 
	  .012445f, .011685f, .010998f, .010374f, .009805f, .009285f, 
	  .008807f, .008366f, .00796f, .007584f, .007234f, .006909f, 
	  .006606f, 1.f, .992849f, .971727f, .937603f, .892006f, .836906f, 
	  .774574f, .707418f, .637827f, .568034f, .5f, .435338f, .375272f, 
	  .320628f, .271861f, .229095f, .192188f, .160794f, .134431f, 
	  .112537f, .094521f, .079802f, .067837f, .058135f, .050271f, 
	  .043882f, .038668f, .034384f, .030835f, .027868f, .02536f, 
	  .02322f, .021375f, .019768f, .018357f, .017107f, .015994f, 
	  .014995f, .014094f, .013277f, .012533f, .011854f, .011232f, 
	  .010659f, .010131f, .009642f, .00919f, .008769f, .008378f, 
	  .008013f, 1.f, .992799f, .971538f, .937214f, .891395f, .836103f, 
	  .773657f, .706504f, .637063f, .567577f, .5f, .435924f, .376536f, 
	  .322622f, .27459f, .232525f, .196247f, .165386f, .139442f, 
	  .117848f, .100015f, .085372f, .07339f, .063594f, .055576f, 
	  .04899f, .04355f, .039024f, .035227f, .032012f, .029265f, 
	  .026895f, .024832f, .023022f, .021421f, .019996f, .018719f, 
	  .01757f, .01653f, .015585f, .014723f, .013934f, .013209f, 
	  .012542f, .011926f, .011355f, .010826f, .010335f, .009876f, 
	  .009449f, 1.f, .992746f, .971337f, .936798f, .890745f, .835251f, 
	  .772684f, .705538f, .636258f, .567096f, .5f, .436534f, .377849f, 
	  .324684f, .277401f, .236042f, .200392f, .170056f, .14452f, 
	  .123211f, .105547f, .090966f, .078954f, .069055f, .060877f, 
	  .05409f, .048423f, .043656f, .039613f, .036156f, .033172f, 
	  .030577f, .028301f, .026291f, .024504f, .022906f, .02147f, 
	  .020172f, .018994f, .017922f, .016942f, .016043f, .015217f, 
	  .014455f, .013751f, .013099f, .012493f, .011929f, .011404f, 
	  .010913f, 1.f, .992689f, .971121f, .936354f, .890051f, .834343f, 
	  .771652f, .704515f, .635408f, .566591f, .5f, .437171f, .379212f, 
	  .326816f, .280295f, .239647f, .204624f, .174805f, .149663f, 
	  .128625f, .111114f, .09658f, .084527f, .074515f, .06617f, .05918f,
	   .053286f, .04828f, .043995f, .040298f, .037083f, .034267f, 
	  .031782f, .029576f, .027607f, .025839f, .024244f, .0228f, 
	  .021487f, .020288f, .019191f, .018184f, .017256f, .0164f, 
	  .015607f, .014873f, .01419f, .013554f, .012961f, .012407f, 1.f, 
	  .992628f, .970889f, .935878f, .889309f, .833373f, .770552f, 
	  .70343f, .634509f, .566059f, .5f, .437836f, .38063f, .329022f, 
	  .283276f, .243344f, .208943f, .17963f, .154869f, .134086f, 
	  .116711f, .10221f, .090103f, .079971f, .071455f, .064259f, 
	  .058138f, .052896f, .048372f, .04444f, .040998f, .037965f, 
	  .035276f, .032879f, .03073f, .028794f, .027044f, .025455f, 
	  .024007f, .022684f, .02147f, .020354f, .019325f, .018375f, 
	  .017494f, .016677f, .015917f, .015208f, .014547f, .013929f, 1.f, 
	  .992562f, .97064f, .935365f, .888512f, .832335f, .769378f, 
	  .702275f, .633556f, .565497f, .5f, .438531f, .382105f, .331306f, 
	  .286345f, .247131f, .213348f, .184531f, .160135f, .139589f, 
	  .122334f, .107852f, .095681f, .08542f, .076729f, .069326f, 
	  .06298f, .057503f, .052745f, .048582f, .044918f, .041673f, 
	  .038784f, .036198f, .033873f, .031773f, .029869f, .028137f, 
	  .026556f, .025108f, .023779f, .022555f, .021425f, .02038f, 
	  .019411f, .018511f, .017674f, .016893f, .016163f, .01548f, 1.f, 
	  .992491f, .97037f, .934813f, .887654f, .83122f, .768122f, 
	  .701043f, .632545f, .564904f, .5f, .439258f, .383639f, .333669f, 
	  .289506f, .251011f, .217838f, .189503f, .165455f, .145129f, 
	  .127978f, .113502f, .101256f, .090859f, .08199f, .074379f, 
	  .06781f, .062102f, .057113f, .052725f, .048843f, .045391f, 
	  .042306f, .039535f, .037036f, .034775f, .03272f, .030846f, 
	  .029133f, .027562f, .026118f, .024786f, .023556f, .022417f, 
	  .021359f, .020376f, .019461f, .018607f, .017808f, .017061f, 1.f, 
	  .992414f, .970077f, .934213f, .886727f, .830019f, .766773f, 
	  .699726f, .631468f, .564275f, .5f, .44002f, .385237f, .336116f, 
	  .292759f, .254984f, .222411f, .194543f, .170827f, .150702f, 
	  .133639f, .119154f, .106824f, .096286f, .087235f, .079418f, 
	  .072627f, .066693f, .061478f, .056869f, .052774f, .049119f, 
	  .045841f, .042889f, .040221f, .037799f, .035595f, .033582f, 
	  .031738f, .030045f, .028486f, .027047f, .025716f, .024483f, 
	  .023337f, .022272f, .021278f, .02035f, .019482f, .01867f, 1.f, 
	  .992329f, .969758f, .933561f, .885719f, .828719f, .765319f, 
	  .698314f, .63032f, .563608f, .5f, .440819f, .386901f, .33865f, 
	  .296107f, .259048f, .227065f, .199648f, .176243f, .156302f, 
	  .13931f, .124804f, .112382f, .101698f, .092464f, .084441f, 
	  .077432f, .071276f, .065839f, .061014f, .056712f, .052858f, 
	  .049391f, .046262f, .043426f, .040847f, .038495f, .036344f, 
	  .034371f, .032556f, .030883f, .029338f, .027907f, .02658f, 
	  .025346f, .024197f, .023125f, .022123f, .021186f, .020307f, 1.f, 
	  .992236f, .969407f, .932848f, .884621f, .827306f, .763746f, 
	  .696794f, .629091f, .562899f, .5f, .441656f, .388636f, .341271f, 
	  .299549f, .263202f, .231796f, .204811f, .181698f, .161921f, 
	  .144984f, .130446f, .117924f, .107091f, .097674f, .089448f, 
	  .082224f, .075849f, .070196f, .06516f, .060654f, .056606f, 
	  .052956f, .049651f, .046651f, .043917f, .04142f, .039132f, 
	  .03703f, .035095f, .03331f, .031658f, .030127f, .028706f, 
	  .027383f, .026151f, .025001f, .023925f, .022918f, .021973f, 1.f, 
	  .992134f, .969021f, .932062f, .883416f, .825764f, .762039f, 
	  .695153f, .627773f, .562144f, .5f, .442535f, .390443f, .343984f, 
	  .303086f, .267442f, .236597f, .210024f, .187182f, .167552f, 
	  .150656f, .136075f, .123446f, .112461f, .102863f, .094435f, 
	  .087001f, .080413f, .074549f, .069307f, .064603f, .060365f, 
	  .056533f, .053058f, .049895f, .047009f, .044368f, .041945f, 
	  .039717f, .037662f, .035764f, .034006f, .032376f, .030861f, 
	  .02945f, .028134f, .026905f, .025756f, .024678f, .023667f, 1.f, 
	  .99202f, .968592f, .931193f, .882088f, .824072f, .760176f, 
	  .693375f, .626355f, .561338f, .5f, .443459f, .392325f, .346787f, 
	  .306715f, .271764f, .241461f, .21528f, .192688f, .173186f, 
	  .156317f, .141684f, .128944f, .117807f, .108027f, .099403f, 
	  .091763f, .084967f, .078897f, .073454f, .068556f, .064132f, 
	  .060123f, .05648f, .053158f, .050122f, .04734f, .044783f, 
	  .042428f, .040255f, .038245f, .036383f, .034653f, .033044f, 
	  .031545f, .030146f, .028838f, .027614f, .026466f, .025389f, 1.f, 
	  .991892f, .968111f, .930223f, .880612f, .822204f, .758133f, 
	  .691441f, .624826f, .560476f, .5f, .444429f, .394285f, .349681f, 
	  .310433f, .276161f, .24638f, .220567f, .198205f, .178813f, 
	  .161959f, .147267f, .134413f, .123123f, .113165f, .104347f, 
	  .096507f, .089509f, .083238f, .0776f, .072512f, .067907f, 
	  .063725f, .059917f, .056439f, .053255f, .050332f, .047643f, 
	  .045164f, .042874f, .040753f, .038785f, .036957f, .035255f, 
	  .033668f, .032185f, .030799f, .0295f, .028281f, .027137f, 1.f, 
	  .991747f, .967568f, .929131f, .878961f, .820127f, .755881f, 
	  .689327f, .62317f, .559553f, .5f, .445447f, .396322f, .352663f, 
	  .314232f, .280622f, .25134f, .225872f, .203719f, .184423f, 
	  .167573f, .152816f, .139846f, .128405f, .118273f, .109267f, 
	  .101232f, .094037f, .087571f, .081742f, .07647f, .071687f, 
	  .067336f, .063366f, .059735f, .056405f, .053345f, .050525f, 
	  .047923f, .045516f, .043285f, .041213f, .039287f, .037492f, 
	  .035816f, .034251f, .032785f, .031412f, .030123f, .028911f, 1.f, 
	  .99158f, .966948f, .92789f, .877097f, .817802f, .753383f, 
	  .687007f, .621374f, .558562f, .5f, .446514f, .398436f, .355727f, 
	  .318103f, .285133f, .256327f, .231181f, .209218f, .190003f, 
	  .173149f, .158323f, .145237f, .133647f, .123346f, .114157f, 
	  .105933f, .098547f, .091892f, .085878f, .080426f, .075471f, 
	  .070953f, .066825f, .063043f, .05957f, .056374f, .053426f, 
	  .050702f, .048179f, .045839f, .043665f, .04164f, .039752f, 
	  .037989f, .036341f, .034797f, .033348f, .031988f, .030709f, 1.f, 
	  .991387f, .966231f, .926463f, .874971f, .815176f, .750594f, 
	  .68445f, .619419f, .557499f, .5f, .447631f, .400622f, .358864f, 
	  .32203f, .289679f, .261322f, .236476f, .214686f, .19554f, 
	  .178676f, .163779f, .150579f, .138844f, .128378f, .119013f, 
	  .110606f, .103035f, .096198f, .090004f, .084377f, .079253f, 
	  .074574f, .070291f, .066361f, .062748f, .059418f, .056343f, 
	  .053499f, .050862f, .048414f, .046136f, .044015f, .042035f, 
	  .040185f, .038453f, .03683f, .035308f, .033877f, .032531f, 1.f, 
	  .991159f, .965387f, .924798f, .872515f, .812182f, .747459f, 
	  .681619f, .61729f, .556358f, .5f, .448795f, .402872f, .362058f, 
	  .325996f, .294236f, .266304f, .241736f, .220103f, .201018f, 
	  .184139f, .169172f, .155861f, .143987f, .133363f, .123828f, 
	  .115245f, .107496f, .100481f, .094114f, .088318f, .08303f, 
	  .078193f, .073758f, .069684f, .065933f, .062472f, .059272f, 
	  .056309f, .05356f, .051004f, .048625f, .046407f, .044336f, 
	  .042399f, .040585f, .038884f, .037287f, .035786f, .034372f, 1.f, 
	  .990884f, .964375f, .922821f, .86964f, .808733f, .743913f, 
	  .678477f, .614972f, .555139f, .5f, .45f, .405173f, .36529f, 
	  .329973f, .298778f, .271246f, .246939f, .225451f, .20642f, 
	  .189526f, .174491f, .161074f, .149066f, .138291f, .128593f, 
	  .119841f, .111922f, .104737f, .098201f, .092241f, .086794f, 
	  .081804f, .077222f, .073006f, .06912f, .06553f, .062208f, 
	  .059128f, .056268f, .053607f, .051128f, .048814f, .046652f, 
	  .044629f, .042734f, .040955f, .039283f, .037711f, .036231f, 1.f, 
	  .990542f, .963129f, .920423f, .866219f, .804718f, .739882f, 
	  .674991f, .612457f, .553845f, .5f, .451236f, .407503f, .36853f, 
	  .333931f, .303274f, .276121f, .252058f, .230707f, .211727f, 
	  .194819f, .17972f, .166202f, .154069f, .14315f, .133298f, 
	  .124386f, .116303f, .108954f, .102256f, .096139f, .090537f, 
	  .085398f, .080674f, .076321f, .072303f, .068587f, .065144f, 
	  .06195f, .05898f, .056216f, .053638f, .05123f, .048979f, .04687f, 
	  .044893f, .043037f, .041293f, .039651f, .038103f, 1.f, .990099f, 
	  .961539f, .917431f, .862069f, .8f, .735295f, .671141f, .609756f, 
	  .552486f, .5f, .452489f, .409836f, .371747f, .337838f, .307692f, 
	  .280899f, .25707f, .235849f, .21692f, .2f, .184843f, .171233f, 
	  .158983f, .147929f, .137931f, .128866f, .120627f, .113122f, 
	  .10627f, .1f, .094251f, .088968f, .084104f, .079618f, .075472f, 
	  .071633f, .068074f, .064767f, .061691f, .058824f, .056148f, 
	  .053648f, .051309f, .049116f, .047059f, .045127f, .043309f, 
	  .041598f, .039984f };


void VoigtLsqfit::voigt(unsigned int n, double *x, double *y, double wd, 
  double a, double dmp, double xc) {

  double dx;

  nop = n;
	xlast = -1.0;
  xparb = dmp * 25.0;
  vstart ();

  xparc = (x[0] - xc) / (wd * (x[1]-x[0]));
  dx = 1.0/wd;

  for (unsigned int i = 0; i < n; i ++) {
    y[i] = a * _voigt ();
    xparc += dx;
  }
}


VoigtLsqfit::VoigtLsqfit () {
  xpara = 0.0;
  xparb = 0.0;
  xparc = 0.0;
  c = ca = cb = cc = cd = ce = ulim = lastv = xlast = 0.0;
  ni = nf = na = nb = nop = 0;
}


VoigtLsqfit::~VoigtLsqfit () { }

//------------------------------------------------------------------------------
// vstart : Mimics the vstart function in XGremlin's voigt.f
//
void VoigtLsqfit::vstart () {

	float xd,tb,b,a,pt,aa;
	int ib, i;

	lastv = 1;
	if (xparb < 0.0) xparb = 0.0;
	if (xparb < 24.99999) {
	  lastv = 2;
	  if (xparb != xlast) {
	    xlast = xparb;
	    ib = int(xparb);
	    xd = xparb - float(ib);
	    for (i = 0; i < 50; i ++) {
        vt[i] = vf[i + 50 * ib] + xd * (vf[i + 50 * (ib+1)] - vf[i + 50 * ib]);
      }
	    ds[0] = 2.0 * (vt[1] - vt[0]);
	    for (i = 1; i < 49; i ++) {
        ds[i] = vt[i + 1] - 2.0 * vt[i] + vt[i - 1];
      }
	    tb = 0.1809017;
	    dm[0] = ds[0] - tb * 2.0 * (ds[1] - ds[0]);
	    for (i = 1; i < 48; i ++) {
        dm[i] = ds[i] - tb * (ds[i + 1] - 2.0 * ds[i] + ds[i - 1]);
      }
	    b = xparb * 0.04;
	    a = bgg[2 * ib] + xd * (bgg[2*ib+2] - bgg[2*ib]);
	    pt = p[ib] + xd * (p[ib+1] - p[ib]);
	    aa = a * a;
	    c = 2.0 * a + b * b;
	    ca = b * pt * 0.6366198;
	    cb = 8.0 * a * ca;
	    cc = cb * (13.0 * a - c);
	    cd = ca * 32.0 * aa * (58.0 * a - 9.0 * c);
	    ce = ca * 64.0 * aa * (655.0 * aa - 150.0 * a * c + 3.0 * c * c);
	    ulim = pow(1.0e6 * cb, 0.250);
	    if (ulim < 4.7) ulim = 4.7;
    }
  }
}

//------------------------------------------------------------------------------
// _voigt : Mimics the voigt function in XGremlin's voigt.f
//
float VoigtLsqfit::_voigt () {
	float u, ut, zm, g;
	int n;

	u = xparc;
    
	if (lastv != 2) {
    return 1.0 / (1.0 + u * u);
  }
	if (u == 0.0) return 1.0 / (1.0 + u * u);
	if (u < 0.) u = -u;
	if (u >= ulim) {
    return ca / (u * u + c);
  }
	if (u >= 4.7) {
    g = 1.0 / (u * u + c);
	  return g * (ca + g *(cb + g * (cc + g *(cd + g * ce))));
  }
	ut = 10.0 * u;
	n = int(ut);
	zm = ut - float(n);
	return vt[n] + zm * (vt[n+1] - vt[n] + (zm - 1.)
		* ((zm + 1.) * dm[n+1] + (2. - zm) * dm[n]) / 6.0);
}


float VoigtLsqfit::P (int Index) throw (Error) {
  if (Index > 0 && Index <= 26) {
    return p[Index - 1];
  } else {
    cout << "Error: Damping P index is " << Index << ". It must be between 1 and 26." << endl;
    throw (Error (LINE_INVALID_DAMPING));
  }
}
